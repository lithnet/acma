pool:
  vmImage: 'windows-latest'

variables:
  - name: buildPlatform 
    value: 'x64'
  - name: buildConfiguration
    value: 'Release'
  - name: build.version.major
    value: 2
  - name: build.version.minor
    value: 0
  - name: build.version.revision
    value: $[counter(format('{0}.{1}', variables['build.version.major'], variables['build.version.minor']), 0)]
  - name: build.version.suffix
    value:
  - name: build.version
    value: $(build.version.major).$(build.version.minor).$(build.version.revision)$(build.version.suffix)
  - name: build.versionShort
    value: $(build.version.major).$(build.version.minor).$(build.version.revision)
  - name: build.date
    value: $[format('{0:yyyy}-{0:MM}-{0:dd}T{0:HH}:{0:mm}:{0:ss}', pipeline.startTime)]
  - group: Azure KeyVault Code Signing
  - name: product.description
    value: Lithnet ACMA

name: $(build.version.major).$(build.version.minor).$(build.version.revision)$(build.version.suffix)
trigger: none

stages:
- stage: build_provider
  displayName: Build project
  dependsOn: []
  jobs:
    - job: "build_provider_job"
      displayName: Build project
      steps:
      - task: NuGetAuthenticate@1
      - task: DotNetCoreCLI@2
        displayName: 'Build Editor project'
        inputs:
          command: build
          arguments: '-c $(buildConfiguration) -p:Version=$(build.version) -p:GeneratePackageOnBuild=false --output "$(build.ArtifactStagingDirectory)"'
          projects: 'src/Lithnet.Acma.Editor/Lithnet.Acma.Editor.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Build ECMA project'
        inputs:
          command: build
          arguments: '-c $(buildConfiguration) -p:Version=$(build.version) -p:GeneratePackageOnBuild=false --output "$(build.ArtifactStagingDirectory)"'
          projects: 'src/Lithnet.Acma.Ecma2/Lithnet.Acma.Ecma2.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Build service'
        inputs:
          command: build
          arguments: '-c $(buildConfiguration) -p:Version=$(build.version) -p:GeneratePackageOnBuild=false --output "$(build.ArtifactStagingDirectory)"'
          projects: 'src/Lithnet.Acma.Service/Lithnet.Acma.Service.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Build custom actions project'
        inputs:
          command: build
          arguments: '-c $(buildConfiguration) -p:Platform=x64 -p:Version=$(build.version) -p:GeneratePackageOnBuild=false --output "$(build.ArtifactStagingDirectory)"'
          projects: 'src/Lithnet.Acma.Installer.CustomActions/Lithnet.Acma.Installer.CustomActions.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Build PowerShell project'
        inputs:
          command: build
          arguments: '-c $(buildConfiguration) -p:Version=$(build.version) -p:GeneratePackageOnBuild=false --output "$(build.ArtifactStagingDirectory)"'
          projects: 'src/Lithnet.Acma.PS/Lithnet.Acma.PS.csproj'


      - task: PublishSymbols@2
        inputs:
          SearchPattern: '**/*.pdb'
          IndexSources: false
          SymbolServerType: 'TeamServices'

      - task: DotNetCoreCLI@2
        displayName: Install AzureSignTool
        inputs:
            command: 'custom'
            custom: 'tool'
            arguments: 'update --global azuresigntool'

      - task: PowerShell@2
        displayName: 'Sign files with AzureSignTool'
        inputs:
          targetType: 'inline'
          script: |
            $files = @()
            $files += (Get-ChildItem -Recurse -Path "$(Build.ArtifactStagingDirectory)\Lithnet*.dll").FullName
            $files += (Get-ChildItem -Recurse -Path "$(Build.ArtifactStagingDirectory)\Lithnet*.exe").FullName

            write-host "Signing $($files.Length) files:"
            write-output $files

            $cmdargs = @(
              "sign",
              "-d", "$(product.description)",
              "-kvu", "$(akv.url)",
              "-kvi", "$(akv.applicationID)",
              "-kvs", "$(akv.secret)",
              "-kvt", "$(akv.tenantId)",
              "-kvc", "$(akv.certificateName)",
              "-tr", "http://timestamp.digicert.com",
              "-td", "sha256"
            )

            $cmdargs += $files
        
            & AzureSignTool $cmdargs
          failOnStderr: true
          showWarnings: true

      - task: MSBuild@1
        displayName: 'Build installer'
        inputs:
          solution: '**/*.wixproj'
          msbuildArchitecture: 'x64'
          platform: 'x64'
          configuration: '$(buildConfiguration)'
          msbuildArguments: '/p:Version=$(build.version) /p:OutputPath=$(Build.ArtifactStagingDirectory) /p:BuildProjectReferences=false'

      - task: PowerShell@2
        displayName: 'Sign MSI with AzureSignTool'
        inputs:
          targetType: 'inline'
          script: |
            $files = @()
            $files += (Get-ChildItem -Recurse -Path "$(Build.ArtifactStagingDirectory)\*.msi").FullName

            write-host "Signing $($files.Length) files:"
            write-output $files

            $cmdargs = @(
              "sign",
              "-d",   "$(product.description)",
              "-kvu", "$(akv.url)",
              "-kvi", "$(akv.applicationID)",
              "-kvs", "$(akv.secret)",
              "-kvt", "$(akv.tenantId)",
              "-kvc", "$(akv.certificateName)",
              "-tr", "http://timestamp.digicert.com",
              "-td", "sha256"
            )

            $cmdargs += $files
        
            & AzureSignTool $cmdargs
          failOnStderr: true
          showWarnings: true

      - task: PublishPipelineArtifact@1
        displayName: Publish artifact
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/Lithnet.Acma.msi'
          publishLocation: 'pipeline'
          artifact: installer

- stage: publish_gthub
  displayName: Publish to github
  dependsOn: "build_provider"
  jobs:
      - deployment: 'PublishPackages'
        environment: 'GitHub'
        displayName: Publish packages to public github
        pool:
          vmImage: windows-2022 
        strategy:
          runOnce:
            deploy:            
              steps:
              - publish: 
              - checkout: none
              - download: current
                artifact: installer
              - task: GitHubRelease@1
                inputs:
                  gitHubConnection: github.com_lithnet # string. Required. GitHub connection (OAuth or PAT). 
                  repositoryName: '$(Build.Repository.Name)' # string. Required. Repository. Default: $(Build.Repository.Name).
                  action: 'create' # 'create' | 'edit' | 'delete'. Required. Action. Default: create.
                  #target: '$(Build.SourceVersion)' # string. Required when action = create || action = edit. Target. Default: $(Build.SourceVersion).
                  tagSource: 'userSpecifiedTag' # 'gitTag' | 'userSpecifiedTag'. Required when action = create. Tag source. Default: gitTag.
                  #tagPattern: # string. Optional. Use when tagSource = gitTag. Tag Pattern. 
                  tag:  v$(build.version) # string. Required when action = edit || action = delete || tagSource = userSpecifiedTag. Tag. 
                  title: v$(build.version) # string. Optional. Use when action = create || action = edit. Release title. 
                  #releaseNotesSource: 'filePath' # 'filePath' | 'inline'. Optional. Use when action = create || action = edit. Release notes source. Default: filePath.
                  #releaseNotesFilePath: # string. Optional. Use when releaseNotesSource = filePath. Release notes file path. 
                  #releaseNotesInline: # string. Optional. Use when releaseNotesSource = inline. Release notes. 
                  assets: '$(Pipeline.Workspace)/installer/*.msi' # string. Optional. Use when action = create || action = edit. Assets. Default: $(Build.ArtifactStagingDirectory)/*.
                  #assetUploadMode: 'delete' # 'delete' | 'replace'. Optional. Use when action = edit. Asset upload mode. Default: delete.
                  #isDraft: false # boolean. Optional. Use when action = create || action = edit. Draft release. Default: false.
                  isPreRelease: true # boolean. Optional. Use when action = create || action = edit. Pre-release. Default: false.
                  addChangeLog: true # boolean. Optional. Use when action = create || action = edit. Add changelog. Default: true.
                # Changelog configuration
                  changeLogCompareToRelease: 'lastFullRelease' # 'lastFullRelease' | 'lastNonDraftRelease' | 'lastNonDraftReleaseByTag'. Required when addChangeLog = true. Compare to. Default: lastFullRelease.
                  #changeLogCompareToReleaseTag: # string. Required when changeLogCompareToRelease = lastNonDraftReleaseByTag && addChangeLog = true. Release Tag. 
                  changeLogType: 'commitBased' # 'commitBased' | 'issueBased'. Required when addChangeLog = true. Changelog type. Default: commitBased.
                  #changeLogLabels: '[{ "label" : "bug", "displayName" : "Bugs", "state" : "closed" }]' # string. Optional. Use when changeLogType = issueBased && addChangeLog = true. Categories. Default: [{ "label" : "bug", "displayName" : "Bugs", "state" : "closed" }].